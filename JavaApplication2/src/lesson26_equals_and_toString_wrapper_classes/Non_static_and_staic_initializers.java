package lesson26_equals_and_toString_wrapper_classes;

/**
 * Инициализатор это блок кода внутри класса, но не внутри метода, существует:
 * initializer block - который срабатывает каждый раз, когда создается новый объект соответствующего класса 
 * static initializer block - который срабатывает один раз, когда класс загружается в память они нужны по нескольким причинам: 
 * 1.Если в классе есть несколько конструкторов и мы хотим , чтобы внезависимости от того какой конструктор вызывается срабатывал
 * определенный код, данный код мы можем поместить в initializer block
 * 2.В основном, эти блоки используют анонимные классы initializer block, это третье место где
 * можно писать код, помимо этого можно писать код в методах и конструкторах
 * 
 * Последовательность initializer блоков следующая:
 * 1.Статические блоки и переменные родительского класса
 * 2.Статические блоки и переменные дочернего класса
 * 3.Не статические блоки и переменные родительского класса
 * 4.Конструкторы родительского класса
 * 5.Нестатические блоки и переменные дочернего класса
 * 6.Конструктор дочернего класса
 * 
 * инициализация пунктов 3-6 происходит только и при каждом создании объекта
 * 
 * 
 */
public class Non_static_and_staic_initializers {

}

class Test {

    Test(){
        System.out.println("This is Konstructor");
    }

    {
        System.out.println("This is inin block 1");
    }
    
     {
        System.out.println("This is inin block 2");
    }

    public static void main(String[] args) {
        Test t1 = new Test();
        Test t2 = new Test();
        /**
         * output: This is inin block 1
                   This is inin block 2
                   This is Konstructor
                   This is inin block 1
                   This is inin block 2
                   This is Konstructor
         * тоесть при каждом создании объекта срабатывает код, но первым выполняется initializer block, потом конструктор, другими словами
         * initializer block выполняется сразу после вызова super-constructorа
         * Если инит блоков несколько, то  взависимости от расположения их
         */
    }

}
 