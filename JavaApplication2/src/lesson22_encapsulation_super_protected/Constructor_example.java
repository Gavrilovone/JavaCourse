
package lesson22_encapsulation_super_protected;

public class Constructor_example {
    
}


 class Hummen3 {
        Hummen3(String n){
            this(n,null); // (5) (7)
        }
        
        Hummen3(String n, String s){ // (6)
            name = n;              
            surmame = s;           
        }
        String name;
        String surmame;
    }

class Student3 extends Hummen3{
    Student3(){ // (2)
    this(5);  // (3) (9)
        System.out.println("Hello");
                                    
    }          
    
    Student3(int i){ 
        super("Петя"); // (4)(8)
        
    }
    public static void main(String[] args) {
        Student3 s = new Student3(); // (1)
                                     
       
    }
    
    /**
     * (1) создется объект, нет аргументов
     * (2) поэтому обращается к этому конструктору
     * (3) На первой строке этот конструктор обращается к конструктору того же класса Student3  у которого есть int аргумент
     * (4) этот конструктор на первой строке обращается к супер классу со стринг параметром
     * (5) этот конструктор на первой строке обращается к конструктору того же Hummen 2 с двумя параметрами
     * (6)этот конструктор на первой строке(мы ее не видим но компилятор ее добавит)  обращается к конструктору 
     * super класса Object у которого нет аргументов. Конструктор класса Object заканчивает свою работу и этот конструктор 
     * придает значения переменным и заканчивает свою работу
     * (7)затем возвращается управление к этому конструктору, он заканчивает свою работу.
     * (8) затем возвращается управление к этому конструктору. мы смотрим, что после этого statement  super("Петя"); ничего 
     * больше нет, он заканчивает свое тело
     * (9) затем передается управление сюда, выводится на экран Hello. после чего конструктор заканчивает свою работу и
     * создается объект student3
     */
    
    /**
     * Таким образом child класс всегда перед выполнением своего конструктора всегда обращается к parent классу
     * и так происходит выше по иерархии наследования следующий обращается к своему родителю, пока не дойдет до Object
     * 
     *  - выражение super вызыввает конструктор суперкласса который заканчивет свою работу всегда раньше child класса
     *  - выражение super если есть, то должно стоять на первой строrt конструктора
     *  - если мы не пишем super то компилятор автоматически добавит его обращаясь к конструктору супер класса без параметров
     *  - выражения super и this не могут одновременно находится в теле конструктора
     */
     
     
}
